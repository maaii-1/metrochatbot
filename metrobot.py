# -*- coding: utf-8 -*-
"""metrobot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uk2QoQwQeGWMrRfQDbXDY9_nA_aCuee0
"""

import time

# Metro Data
metro_lines = {
    "Line 1 (Blue)": ["Helwan", "Ain Helwan", "Helwan University", "Wadi Hof", "Hadayek Helwan", "Elmasraa", "Tura El-Esmant", "Tura El-Balad", "Kozzika", "Sakanat El-Maadi", "Maadi", "Hadayek El-Maadi", "Dar El-Salam", "El-Zahraa", "Mar Girgis", "El-Malek El-Saleh", "Al-Sayeda Zeinab", "Saad Zaghloul", "Sadat", "Nasser", "Orabi", "Al Shohadaa", "Ghamra", "El-Demerdash", "Manshiet El-Sadr", "Kobri El-Kobba", "Hammamat El-Kobba", "Saray El-Kobba", "Hadayeq El-Zaitoun", "Helmeyet El-Zaitoun", "El-Matareyya", "Ain Shams", "Ezbet El-Nakhl", "El-Marg", "New Marg"],
    "Line 2 (Red)": ["Shubra El-Kheimah", "Koliet El-Zeraa", "Mezallat", "Khalafawy", "St. Teresa", "Rod El-Farag", "Masarra", "Al Shohadaa", "Attaba", "Mohamed Naguib", "Sadat", "Opera", "Dokki", "Bohooth", "Cairo University", "Faisal", "Giza", "Omm El-Masryeen", "Sakiat Mekky", "El Monib"],
    "Line 3 (Green)": ["Adly Mansour", "Omar Ibn El Khattab", "Haykestep", "El Shams Club", "Alf Maskan", "Heliopolis", "Haroun", "Al-Ahram", "Koliet El-Banat", "Stadium", "Fair Zone", "Abbassiya", "Abdou Pasha", "El-Geish", "Bab El Shaariya", "Attaba", "Nasser", "Maspero", "Safaa Hegazy", "Kit Kat", "Tawfikia", "Wadi El Nile", "Gamet El Dowel", "Boulak El Dakrour", "Sudan", "Imbaba", "El-Bohy", "El-Qawmia", "Ring Road"]
}
interchange_stations = {
    "Sadat": ["Line 1 (Blue)", "Line 2 (Red)"],
    "Nasser": ["Line 1 (Blue)", "Line 3 (Green)"],
    "Al Shohadaa": ["Line 1 (Blue)", "Line 2 (Red)"],
    "Cairo University": ["Line 2 (Red)", "Line 3 (Green)"],
    "Attaba": ["Line 2 (Red)", "Line 3 (Green)"],
    "Adly Mansour": ["Line 3 (Green)", "Electric Train (LRT)"],
    "Wadi El Nile": ["Line 3 (Green)", "West Nile Monorail"],
    "El Istad": ["Line 3 (Green)", "East Nile Monorail"]
}

fare_prices = {
    "1-9": 8,
    "10-16": 10,
    "17-23": 15,
    "24+": 20,
    "People of Determination": 5
}

def calculate_fare(station_count):
    if station_count <= 9:
        return fare_prices["1-9"]
    elif station_count <= 16:
        return fare_prices["10-16"]
    elif station_count <= 23:
        return fare_prices["17-23"]
    else:
        return fare_prices["24+"]

def find_line(station):
    for line, stations in metro_lines.items():
        if station in stations:
            return line
    return None

def find_route(start, end):
    start_line = find_line(start)
    end_line = find_line(end)

    if start_line == end_line:
        start_index = metro_lines[start_line].index(start)
        end_index = metro_lines[end_line].index(end)
        stop_count = abs(end_index - start_index)
        return f"🚆 Take {start_line} from {start} to {end} ({stop_count} stops).", stop_count

    possible_routes = []
    for interchange, lines in interchange_stations.items():
        if start_line in lines and end_line in lines:
            stops_to_interchange = abs(metro_lines[start_line].index(interchange) - metro_lines[start_line].index(start))
            stops_from_interchange = abs(metro_lines[end_line].index(end) - metro_lines[end_line].index(interchange))
            total_stops = stops_to_interchange + stops_from_interchange
            possible_routes.append((interchange, stops_to_interchange, stops_from_interchange, total_stops))

    if not possible_routes:
        return "❌ No direct route found.", 0

    possible_routes.sort(key=lambda x: x[3])

    route_message = ""
    for i, (interchange, stops_to, stops_from, total) in enumerate(possible_routes):
        route_message += f"{i+1}. 🔄 {interchange}: {stops_to} stops to interchange, {stops_from} stops after, total {total} stops.\n"

    # Return options so GUI can handle the choice
    return route_message, possible_routes

def metro_chatbot():
    print("\n\U0001F687 Welcome to the Cairo Metro Chatbot! How can I assist you today?")
    while True:
        user_input = input("\n\U0001F4AC You: ").strip().lower()

        if any(word in user_input for word in ["exit", "quit", "bye"]):
            print("\n\U0001F916 Chatbot: Goodbye! Have a great day! \U0001F44B")
            break
        elif "how many lines" in user_input:
            print("\n\U0001F916 Chatbot: The Cairo Metro has 3 lines:\n   🚆 Line 1 (Blue)\n   🚆 Line 2 (Red)\n   🚆 Line 3 (Green)")
        elif "ticket price" in user_input:
            print("\n\U0001F916 Chatbot: 🎟️ Ticket Prices:\n   📍 1-9 stops = 8 EGP\n   📍 10-16 stops = 10 EGP\n   📍 17-23 stops = 15 EGP\n   📍 24+ stops = 20 EGP\n   ♿ People of Determination = 5 EGP")
        elif "from" in user_input and "to" in user_input:
            stations = user_input.split("from")[-1].split("to")
            if len(stations) == 2:
                start = stations[0].strip().title()
                end = stations[1].strip().title()
                print(f"\n\U0001F916 Finding route from {start} to {end}...")
                time.sleep(2)
                route_info, count = find_route(start, end)
                print(f"\n{route_info}\n🎫 Ticket Price: {calculate_fare(count)} EGP")


if __name__ == "__main__":
    metro_chatbot()